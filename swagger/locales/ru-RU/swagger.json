{
    "swagger": {
        "sidebar": {
            "label": "swagger",
            "name": "Swagger UI"
        },
        "label": {
            "path": "Путь",
            "summary": "Однострочное описание",
            "description": "Подробное описание",
            "tags": "Теги",
            "consumes": "Вход (Consumes)",
            "produces": "Выход (Produces)",
            "deprecated": "Deprecated",
            "parameter": "параметр",
            "parameters-help": "Описание параметров",
            "response": "ответ",
            "responses-help": "Описание ответов сервиса (responses)",
            "property": "свойство"
        },
        "placeholder": {
            "tags": "Список тегов, разделенный запятыми",
            "consumes": "Список входящих MIME-типов, разделенный запятыми",
            "produces": "Список исходящих MIME-типов, разделенный запятыми"
        },
        "data-content": {
            "summary": "Краткое описание производимой операции (например: 'Найти запись по id'). Для того чтобы в интерфейсе swagger-ui было удобно ориентироваться, рекомендуется уместить описание в одну строку (120 символов).",
            "description": "Развернутое описание логики работы операции, ее поведения. Можно использовать синтаксис GitHub Flavored Markup для форматирования.",
            "tags": "Список тегов для управления документацией API. Теги можно использовать для того чтобы логически группировать операции в по типу используемых ресурсов или по любому другому признаку.",
            "consumes": "Список входящих (consumes) MIME-типов: они используются для передачи входных параметров операции.",
            "produces": "Список исходящих (produces) MIME-типов: они используются для передачи ответа операции на запрос.",
            "deprecated": "Помечает операцию как устаревшую (deprecated). Использования устаревших операций следует избегать."
        },
        "content": {
            "parameter-info": "<div style='font-size:10px'><p>Список допустимых параметров операции.</p><p>Для добавления нового параметра в запрос используйте кнопку <span class='btn btn-mini' id='node-config-input-add-parameter'><i class='fa fa-plus'></i> параметр</span>.</p><p>Существует четыре возможных типа передачи параметров.</p><ul><li>Query - Параметры указываются в URL. Например для /items?id=###, query-параметром будет являтся id.</li><li>Header - Передача параметра в дополнительных заголовках HTTP-запроса.</li><li>Body - Передача параметра в содержимом HTTP-запроса. Поскольку у запроса может быть только одно содержимое - возможно использовать только один body-параметр. Имя body-параметра никак не используется при обработке запроса и используется только для.</li><li>Form - Используется для описания параметров отправленных в содержимом HTTP-запроса через форму в случае когда заголовок content-type содержит значение application/x-www-form-urlencoded или multipart/form-data are (Swagger определяет каждое поле формы как отдельный параметр операции). Это единственный тип параметра который может быть использован для загрузки файлов, именно он обеспечивает поддержку такого типа параметра как файл.</li></ul></div>",
            "response-info": "<div style='font-size: 10px'><p>Список возможных ответов, которые возвращаются как результат выполнения этой операции.</p><p>Вы можете настроить ответы в зависимости от status-кода HTTP, а также стандартные ответы по умолчанию.</p><p>Для добавления нового параметра в ответ используйте кнопку <span class='btn btn-mini' id='node-config-input-add-parameter'><i class='fa fa-plus'></i> ответ</span>.</p><p>Если не задано ни одного ответа, то в этом случае стандартный ответ 'success' будет добавлен в операцию автоматически.</p></div>",
            "type": "Тип атрибута - допускается использовать только простые типы данных.",
            "format": "The extending format for the previously mentioned type.",
            "parameter-description": "Краткое описание параметра. Может содержать примеры использования. Для форматирования можно использовать GitHub Flavored Markup.",
            "required": "Определяет, является ли параметр обязательным.",
            "response-description": "Краткое описание ответа. Может содержать примеры использования. Для форматирования можно использовать GitHub Flavored Markup."
        },
        "tabs-label": {
            "info": "Описание",
            "parameters": "Параметры",
            "responses": "Ответы"
        },
        "text": {
            "type": "Тип",
            "format": "Формат",
            "name": "Имя",
            "in": "в",
            "path": "Путь",
            "description": "Описание",
            "required": "Обязательный параметр?",
            "properties": "Свойства",
            "file": "файл",
            "code": "Код",
            "default": "По умолчанию"
        },
        "helpBox": {
            "title": "Похоже у вас не хватает описания Swagger...",
            "swaggerIntro": "Swagger это простой, но мощный способ описания REST API.",
            "swaggerInfo": "Плагин Swagger динамически создает документацию Swagger основываясь на настройках ваших HTTP-узлов (HTTP endpoint nodes).",
            "swaggerInstructions0": "После создания вашего REST API в редакторе, нажмите на HTTP-узел (HTTP endpoint node). Вы можете добавить дополнительное описание Swagger к этому узлу нажав на кнопку Добавить на вкладке Docs (Документация).",
            "swaggerInstructions1": "Вы можете добавить дополнительное описание для типов входных и выходных данных, которыми оперирует ваш http-узел, быстро пройдя по шагам интерфейса настройки Swagger и добавив всю нужную информацию.",
            "swaggerInstructions2": "Как только ваш процесс (flow) будет опубликован эта вкладка автоматически отобразит интерфейст для вашего REST API.",
            "swaggerOutro": "Вы можете использовать эту вкладку и интерфейс Swagger-UI для тестирования вашего API."
        }
    }
}
